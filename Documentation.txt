1. get_path() -> None:
Функция получает текущий рабочий каталог и позволяет пользователю изменить его.

2. create_directory_and_file() -> None:
Функция создает папку "Записки" и файл "data.txt" для хранения информации об остатке денег, если указанные файл и папка отсутствуют в директории.

3. get_current_balance() -> int:
Функция получает текущий остаток денег из файла "data.txt". Возвращаемое значение: int (текущий остаток денег).

4. update_balance(category: str, amount: int, current_balance: int) -> int:
Функция обновляет текущий остаток денег на основе категории и суммы операции.
Параметры:
     - category (str): Категория операции ("доход" или "расход").
     - amount (int): Сумма операции.
     - current_balance (int): Текущий остаток денег.
Возвращаемое значение: int (обновленный остаток денег).

5. is_valid_date(date_str: str) -> bool:
Функция проверяет, является ли переданная строка корректной датой.
Параметры:
     - date_str (str): Строка с датой в формате "%Y-%m-%d".
Возвращаемое значение: bool (True, если дата корректна и не раньше 2024 года, иначе False).

6. is_valid_category(category: str) -> bool:
Функция проверяет, является ли переданная строка корректной категорией.
Параметры:
     - category - строка, представляющая категорию операции.
Возвращаемое значение: True, если категория является корректной ("доход" или "расход"), иначе False.

7. is_valid_amount(amount: str) -> bool:
Функция проверяет, является ли переданная строка корректной суммой.
Параметры:
     - amount - строка, представляющая сумму операции.
Возвращаемое значение: True, если сумма является положительным целым числом, иначе False.

8. add_entry():
Функция:
Запрашивает ввод даты в формате "ГГГГ-ММ-ДД". Проверяет корректность введенной даты.
Запрашивает ввод категории (доход или расход). Проверяет корректность введенной категории.
Запрашивает ввод суммы операции. Проверяет корректность введенной суммы.
Запрашивает ввод описания операции.
Получает текущий остаток денег.
Обновляет остаток денег на основе введенной категории и суммы операции.
Создает новую запись об операции с указанной датой, категорией, суммой и описанием.
Обновленный остаток денег и новая запись добавляются в файл "data.txt".

9. search_entries() -> None:
Функция:
Запрашивает у пользователя поле для поиска (по дате, категории или сумме).
Проверяет корректность введенного поля для поиска.
Запрашивает значение для поиска.
Открывает файл "data.txt" для чтения.
Считывают все записи из файла, начиная со второй строки (первая строка содержит информацию об остатке денег).
Производит поиск записей, удовлетворяющих условиям поиска.
Если найдены записи, они выводятся на экран с указанием их ID.
Если записи не найдены, выводится сообщение "Записи не найдены.".

10. update_entry() -> None:
Функция:
Вызывает функцию search_entries() для поиска записи, которую пользователь хочет изменить.
Пользователю предлагается ввести ID записи для изменения.
Открывает файл "data.txt" для чтения.
Считывает все строки из файла.
Проверяет существование записи с указанным ID.
Запрашивает у пользователя ввод новой даты, категории, суммы и описания для изменения записи.
Проверяет корректность введенной даты, категории и суммы.
Обновляет остаток денег на основе изменений в записи.
Формирует новаю запись с введенными данными.
Обновляет строки файла: первая строка содержит обновленный остаток денег, а строка с соответствующим ID содержит новую запись.
Перезаписывает содержимое файла с учетом внесенных изменений.

11. calculate_finances() -> None:
Функция:
Проверяет наличие файла "data.txt" и его размер. Если файла нет или он пустой, выводится сообщение "Нет записей. Добавьте данные.".
Открывает файл "data.txt" для чтения.
Считываtn все строки из файла.
Если файл пустой, выводится сообщение "Файл пуст.".
Первую строку файла (содержащую информацию об остатке денег) преобразует из JSON в словарь.
Извлекает текущий баланс из словаря и выводит на экран.
Вычисляет общие расходы и доходы, суммируя соответствующие значения из записей файла.
Выводит суммы расходов и доходов на экран с двумя знаками после запятой (всегда нули, программа принимает только целые значения).

12. main_menu() -> None:
Бесконечный цикл отображает главное меню с возможными действиями.
Пользователю предлагается выбрать действие, вводя соответствующий номер.
В зависимости от выбора пользователя выполняется одна из следующих функций:
     - calculate_finances() для отображения текущего баланса, расходов и доходов;
     - add_entry() для добавления новой записи;
     - get_path() и create_directory_and_file() для изменения рабочего каталога и создания файла данных;
     - search_entries() для поиска информации;
     - update_entry() для изменения сведений;
     - Прерывание цикла при выборе "6" (выход).
Если пользователь вводит некорректный номер действия, выводится сообщение "Пожалуйста, введите корректный номер действия.".

